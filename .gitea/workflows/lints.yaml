# SPDX-License-Identifier: EUPL-1.2
name: Run cargo lints

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  RUSTFLAGS: "-D warnings -W unreachable-pub -W rust-2021-compatibility -C debuginfo=0"
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: short

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '.gitea/**'
      - 'melib/src/**'
      - 'melib/Cargo.toml'
      - 'meli/src/**'
      - 'meli/Cargo.toml'
      - 'Cargo.toml'
      - 'Cargo.lock'

jobs:
  lints:
    name: Run lints
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [linux-amd64, ]
        include:
          - build: linux-amd64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - id: os-deps
        name: install OS dependencies
        run: |
          apt-get update
          apt-get install -y libdbus-1-dev pkg-config mandoc libssl-dev
      - name: Find meli MSRV from meli/Cargo.toml.
        run: |
          echo MELI_MSRV=$(grep -m1 rust-version meli/Cargo.toml | head -n1 | cut -d'"' -f 2 | head -n1) >> $GITHUB_ENV
          printf "Rust MSRV is %s\n" $(grep -m1 rust-version meli/Cargo.toml | head -n1 | cut -d'"' -f 2 | head -n1)
      - id: rustup-setup
        name: Install Rustup and toolchains
        shell: bash
        run: |
          if ! command -v rustup &>/dev/null; then
            curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused --location --silent --show-error --fail "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
            source "${HOME}/.cargo/env"
            echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH
            echo "CARGO_HOME=${CARGO_HOME:-$HOME/.cargo}" >> $GITHUB_ENV
            rustup toolchain install --profile minimal --component "rustfmt" --target "${{ matrix.target }}" -- "${{ env.MELI_MSRV }}"
            rustup component add rustfmt --toolchain ${{ env.MELI_MSRV }}-${{ matrix.target }}
            rustup toolchain install --profile minimal --component clippy,rustfmt --target "${{ matrix.target }}" -- "${{ matrix.rust }}"
            rustup component add rustfmt --toolchain ${{ matrix.rust }}-${{ matrix.target }}
            rustup default ${{ matrix.rust }}
          fi
      - name: Setup Rust target
        run: |
          mkdir -p "${{ env.CARGO_HOME }}"
          cat << EOF > "${{ env.CARGO_HOME }}"/config.toml
          [build]
          target = "${{ matrix.target }}"
          EOF
      - name: Add lint dependencies
        shell: bash
        run: |
          cargo install --version 0.15.1 --target "${{ matrix.target }}" cargo-msrv
          # "This package is currently implemented using rust-analyzer internals, so cannot be published on crates.io."
          RUSTFLAGS="" cargo install --locked --target "${{ matrix.target }}" --git https://github.com/dcchut/cargo-derivefmt --rev 95da8eee343de4adb25850893873b979258aed7f --bin cargo-derivefmt
      - name: cargo-msrv verify melib MSRV
        if: success() || failure()
        run: |
          source "${HOME}/.cargo/env"
          make -f ./.gitea/Makefile.lint cargo-msrv
      - name: rustfmt
        if: success() || failure()
        run: |
          source "${HOME}/.cargo/env"
          make -f .gitea/Makefile.lint rustfmt
      - name: clippy
        if: success() || failure()
        run: |
          source "${HOME}/.cargo/env"
          make -f .gitea/Makefile.lint clippy
      - name: cargo-derivefmt melib
        if: success() || failure()
        run: |
          source "${HOME}/.cargo/env"
          make -f .gitea/Makefile.lint cargo-derivefmt-melib
      - name: cargo-derivefmt meli
        if: success() || failure()
        run: |
          source "${HOME}/.cargo/env"
          make -f .gitea/Makefile.lint cargo-derivefmt-meli
      - name: cargo-derivefmt tools
        if: success() || failure()
        run: |
          source "${HOME}/.cargo/env"
          make -f .gitea/Makefile.lint cargo-derivefmt-tools
