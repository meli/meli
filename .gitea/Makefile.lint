# SPDX-License-Identifier: EUPL-1.2
#
# Makefile for: "Run cargo lints" workflow, in .gitea/workflows/lints.yaml

.POSIX:
.SUFFIXES:
CARGO_INCREMENTAL ?= 0
CARGO_NET_RETRY ?= 10
CARGO_REGISTRIES_CRATES_IO_PROTOCOL ?= sparse
RUSTFLAGS ?= -D warnings -W unreachable-pub -W rust-2021-compatibility -C debuginfo=0
RUSTUP_MAX_RETRIES ?= 10
RUST_BACKTRACE ?= short
NIGHTLY_EXISTS=`((cargo +nightly 2> /dev/null 1> /dev/null) && echo 0)|| echo 1)`
GIT=env GIT_CONFIG_GLOBAL="" GIT_CONFIG_SYSTEM="" GIT_CONFIG_NOSYSTEM=1 git

.PHONY: all
all: cargo-msrv rustfmt clippy cargo-derivefmt-melib cargo-derivefmt-meli cargo-derivefmt-tools
	@printf "All checks completed.\n"

# Check both melib and meli in the same Make target, because if melib does not
# satisfy MSRV then meli won't either, since it depends on melib.
.PHONY: cargo-msrv
cargo-msrv:
	@printf "cargo-msrv\n"
	cargo msrv --output-format json --log-level trace --log-target stdout --path meli verify -- cargo check --all-targets
	cargo msrv --output-format json --log-level trace --log-target stdout --path melib verify -- cargo check --all-targets

.PHONY: rustfmt
rustfmt:
	@printf "rustfmt\n"
	@((if [ "${NIGHTLY_EXISTS}" -eq 0 ]; then printf "running rustfmt with nightly toolchain\n"; else printf "running rustfmt with active toolchain\n"; fi))
	@((if [ "${NIGHTLY_EXISTS}" -eq 0 ]; then cargo +nightly fmt --check --all; else cargo fmt --check --all; fi))

.PHONY: clippy
clippy:
	@printf "clippy\n"
	cargo clippy --no-deps --all-features --all --tests --examples --benches --bins

.PHONY: cargo-derivefmt-melib
cargo-derivefmt-melib:
	@printf "cargo-derivefmt-melib\n"
	@printf "Checking that derives are sorted alphabetically...\n"
	cargo derivefmt --manifest-path ./melib/Cargo.toml
	@$(GIT) checkout --quiet meli/src/conf/overrides.rs
	@($(GIT) diff --quiet ./melib && $(GIT) diff --cached --quiet ./melib && printf "All ./melib derives are sorted alphabetically.\n") || (printf "Some derives in the ./melib crate are not sorted alphabetically, see diff:\n"; $(GIT) diff HEAD; exit 1)

.PHONY: cargo-derivefmt-meli
cargo-derivefmt-meli:
	@printf "cargo-derivefmt-meli\n"
	@printf "Checking that derives are sorted alphabetically...\n"
	cargo derivefmt --manifest-path ./meli/Cargo.toml
	@$(GIT) checkout --quiet meli/src/conf/overrides.rs
	@($(GIT) diff --quiet ./meli && $(GIT) diff --cached --quiet ./meli && printf "All ./meli derives are sorted alphabetically.\n") || (printf "Some derives in the ./meli crate are not sorted alphabetically, see diff:\n"; $(GIT) diff HEAD; exit 1)

.PHONY: cargo-derivefmt-tools
cargo-derivefmt-tools:
	@printf "cargo-derivefmt-tools\n"
	@printf "Checking that derives are sorted alphabetically...\n"
	cargo derivefmt --manifest-path ./tools/Cargo.toml
	@$(GIT) checkout --quiet meli/src/conf/overrides.rs
	@($(GIT) diff --quiet ./tools && $(GIT) diff --cached --quiet ./tools && printf "All ./tools derives are sorted alphabetically.\n") || (printf "Some derives in the ./tools crate are not sorted alphabetically, see diff:\n"; $(GIT) diff HEAD; exit 1)
