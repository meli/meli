# SPDX-License-Identifier: EUPL-1.2
name: Cargo manifest lints

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  RUSTFLAGS: "-D warnings -W unreachable-pub -W rust-2021-compatibility -C debuginfo=0"
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: short

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '.gitea/**'
      - 'melib/Cargo.toml'
      - 'meli/Cargo.toml'
      - 'fuzz/Cargo.toml'
      - 'tool/Cargo.toml'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.cargo/config.toml'

jobs:
  manifest_lint:
    name: Run Cargo manifest etc lints
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [linux-amd64, ]
        include:
          - build: linux-amd64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - name: Install sudo for act
        if: env.ACT == 'true'
        run: apt-get update && apt-get install --assume-yes --no-install-recommends sudo
      - id: os-deps
        name: install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mandoc
      - uses: ./.github/actions/rustup-setup
      - uses: ./.github/actions/cargo-setup
      - name: Find meli MSRV from meli/Cargo.toml.
        run: echo MELI_MSRV=$(grep -m1 rust-version meli/Cargo.toml | head -n1 | cut -d'"' -f 2 | head -n1) >> $GITHUB_ENV
      - name: Cargo cache setup
        id: cache-cargo
        uses: actions/cache@v4
        with:
          path: cargo-cache
          key: ${{ runner.os }}-cargo-cache
      - id: rustup-setup
        name: Install Rustup and toolchains
        shell: bash
        run: |
          rustup toolchain install --profile minimal --component "rustfmt" --target "${{ matrix.target }}" -- "${{ env.MELI_MSRV }}"
          rustup component add rustfmt --toolchain ${{ env.MELI_MSRV }}-${{ matrix.target }}
          rustup default ${{ matrix.rust }}
      - name: cargo-msrv verify melib MSRV
        if: success() || failure()
        run: |
          source "${HOME}/.cargo/env"
          cargo-msrv --output-format json --log-level trace --log-target stdout --path meli verify -- cargo check --all-targets
          cargo-msrv --output-format json --log-level trace --log-target stdout --path melib verify -- cargo check --all-targets
      - name: cargo-sort
        if: success() || failure()
        run: |
          source "${HOME}/.cargo/env"
          cargo-sort --check --check-format --grouped --order package,bin,lib,dependencies,features,build-dependencies,dev-dependencies,workspace fuzz
          cargo-sort --check --check-format --grouped --order package,bin,lib,dependencies,features,build-dependencies,dev-dependencies,workspace tools
          cargo-sort --check --check-format --grouped --order package,bin,lib,dependencies,features,build-dependencies,dev-dependencies,workspace --workspace
      - name: Check debian/changelog is up-to-date.
        if: success() || failure()
        run: |
          ./scripts/check_debian_changelog.sh
